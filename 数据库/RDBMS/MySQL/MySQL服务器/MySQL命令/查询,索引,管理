1. SQL查询

　　1. 执行顺序
　　　　3. select ... 聚合函数 from 表名
　　　　1. where ...
　　　　2. group by ...
　　　　4. having ...
　　　　5. order by ...
　　　　6. limit ...

　　2. group by
　　　　1. 作用： 给查询结果进行分组
　　　　2. 示例
　　　　　　1. 查询表中一共有几个国家
　　　　　　　　select country from sanguo group by country;
　　　　　　2. 计算所有国家的平均攻击力
　　　　　　　　select country,avg(gongji) from sanguo
　　　　　　　　group by country;

　　　　　　　　先分组 --> 再聚合 --> 再去重
　　　　　　　　蜀国
　　　　　　　　蜀国
　　　　　　　　蜀国 --> 120 --> 蜀国
　　　　　　　　魏国
　　　　　　　　魏国 --> 110 --> 魏国
　　　　　　　　吴国 --> 115 --> 吴国

　　　　　　3. 查找所有国家中英雄数量最多的前2名的国家名称和英雄数量

　　　　　　　　select country,count(id) as number from sanguo 
　　　　　　　　group by country
　　　　　　　　order by number desc
　　　　　　　　limit 2;

　　　　3. 注意
　　　　　　1. group by 之后的字段名必须要为select之后的字段名
　　　　　　2. 如果select之后的字段名和group by 之后的字段不一致，则必须对该字段进行聚合处理(聚合函数)

　　3. having 语句
　　　　1. 作用
　　　　　　对查询的结果进行进一步筛选
　　　　2. 示例
　　　　　　1. 找出平均攻击力>105的国家的前2名，显示国家名和平均攻击力

　　　　　　　　select country,avg(gongji) as power from sanguo
　　　　　　　　group by country
　　　　　　　　having power > 105
　　　　　　　　order by power desc
　　　　　　　　limit 2;
　　　　3. 注意
　　　　　　1. having语句通常和group by 语句联合使用, 过滤由group by 语句返回的记录集
　　　　　　2. where 只能操作表中实际存在字段，having可操作由聚合函数生成的显示列

　　4. distinct
　　　　1. 作用: 不显示字段重复值
　　　　2. 示例
　　　　　　1. 表中都有哪些国家
　　　　　　　　select distinct country from sanguo;

　　　　　　2. 计算蜀国一共有多少个英雄
　　　　　　　　select count(distinct id) from sanguo
　　　　　　　　where country ='蜀国';
　　　　　　3. 注意
　　　　　　　　1. distinct和from之间所有字段都相同才会去重
　　　　　　　　2. distinct不能对任何字段做聚合处理

　　5. 查询表记录时做数学运算
　　　　1. 运算符
　　　　　　+ - * / %
　　　　2. 示例
　　　　　　1. 查询时所有英雄攻击力翻倍
　　　　　　　　select id,name,gongji*2 as gj from sanguo;


　　　　　　　　## sudo apt-get install python3-pip
　　　　　　　　## sudo pip3 install pymysql
2. 约束与索引

　　1. 作用：保证数据的完整性、一致性、有效性
　　2. 约束分类
　　　　1. 默认约束(default)
　　　　　　1. 插入记录，不给该字段赋值，则使用默认值
　　　　2. 非空约束(not NULL)
　　　　　　1.不允许该字段的值有NULL记录
　　　　　　　　sex enum("M","F","S") not null default 'S'

　　3. 索引
　　　　1. 定义
　　　　　　对数据库表的一列或多列的值进行排序的一种结构(Btree方式)
　　　　2.优点
　　　　　　加快数据检索速度
　　　　3. 缺点
　　　　　　1. 占用物理存储空间
　　　　　　2. 当对表中数据更新时，索引需要动态维护，降低数据维护速度

　　　　4. 索引示例
　　　　　　1. 开启运行时间检测：
　　　　　　　　show variables like "profiling"; # 查看是否开启
　　　　　　　　set profiling=1;
　　　　　　2. 执行查询语句
　　　　　　　　select name from t1 where name='lucy99999';
　　　　　　3. 查看执行时间
　　　　　　　　show profiles;
　　　　　　4. 在name字段创建索引
　　　　　　　　create index name on t1(name);
　　　　　　5. 再执行查询语句
　　　　　　　　select name from t1 where name="lucy88888";
　　　　　　6. 查看执行时间
　　　　　　　　show profiles;

　　　　　　　　set profiling=0; # 关闭运行时间检测
3.索引

　　1. 普通索引(index)

　　　　1. 使用规则
　　　　　　1. 可设置多个字段
　　　　　　2. 字段值无约束
　　　　　　3. key标志：MUL
　　　　2. 创建index
　　　　　　1. 创建表时
　　　　　　　　create table 表名(...
　　　　　　　　index(字段名), index(字段名));
　　　　　　2. 在已有表中创建索引
　　　　　　　　create index 索引名 on 表名(字段名);
　　　　　　　　create index name on t3(name);
　　　　3. 查看索引
　　　　　　1. desc 表名; --> KEY标志为: MUL
　　　　　　2. show index from 表名\G
　　　　4. 删除索引
　　　　　　drop index 索引名 on 表名;

　　2. 唯一索引(unique)
　　　　1. 使用规则
　　　　　　1. 可设置多个字段
　　　　　　2. 约束：字段值不允许重复，但可为NULL
　　　　　　3. KEY标志： UNI
　　　　2. 创建
　　　　　　1. 创建表时创建
　　　　　　　　unique(字段名),
　　　　　　　　unique(字段名)
　　　　　　2. 已有表
　　　　　　　　create unique index 索引名 on 表名(字段名);
　　　　3.查看索引、删除索引 同 普通索引一样

　　3. 主键索引(primary key)
　　　　自增长属性(auto_increment,配合主键一起使用)
　　　　1. 使用规则
　　　　　　1. 只能有一个主键字段
　　　　　　2. 约束：不允许重复，且不能为NULL
　　　　　　3. KEY标志: PRI
　　　　　　4. 通常设置记录编号字段id, 能唯一锁定一条记录
　　　　2. 创建
　　　　　　1. 创建表时
　　　　　　　　(id int primary key auto_increment,)auto_increment=10000; ##设置自增长起始值
　　　　　　　　已有表添加自增长属性：
　　　　　　　　　　alter table 表名 modify id int
　　　　　　　　　　auto_increment;
　　　　　　　　已有表重新指定起始值：
　　　　　　　　　　alter table 表名 auto_increment=20000;
　　　　　　2. 已有表
　　　　　　　　alter table 表名 add primary key(id);
　　　　3. 删除
　　　　　　1. 删除自增长属性(modify)
　　　　　　　　alter table 表名 modify id int;
　　　　　　2. 删除主键索引
　　　　　　　　alter table 表名 drop primary key;
4.数据导入

　　1. 作用：把文件系统的内容导入到数据库中
　　2. 语法
　　　　load data infile "文件名"
　　　　into table 表名
　　　　fields terminated by "分隔符"
　　　　lines terminated by "\n";

　　3. 将scoretable.csv文件导入到数据库的表中
　　　　1. 在数据库中创建对应的表
　　　　　　create table scoretab(
　　　　　　id int,
　　　　　　name varchar(15),
　　　　　　score float(5,2),
　　　　　　number bigint,
　　　　　　class char(7)
　　　　　　);
　　　　　　show create table scoretab;
　　　　2. 把文件拷贝到数据库的默认搜索路径中
　　　　　　1. 查看默认搜索路径
　　　　　　　　show variables like "secure_file_priv";
　　　　　　　　/var/lib/mysql-files/
　　　　　　2. 拷贝文件
　　　　　　　　sudo cp ~/scoretable.csv /var/lib/mysql-files/
　　　　3. 执行数据导入语句
　　　　　　load data infile "文件名"
　　　　　　into table 表名
　　　　　　fields terminated by "分隔符"
　　　　　　lines terminated by "\n";
　　　　4. 文件权限
　　　　　　rwxrw-rw- 1 chenchuan chenchuan scoretable.csv
　　　　　　　　所有者 所属组

　　　　　　　　rwx: chenchuan用户
　　　　　　　　rw-: 同组其它用户
　　　　　　　　rw-: 其他组的其它用户(mysql用户)
　　　　　　　　r--> 4
　　　　　　　　w--> 2
　　　　　　　　x--> 1
　　　　　　chmod 644 文件名 rw-r--r--
　　　　5. Excel表格如何转化为CSV文件
　　　　　　1. 打开Excel文件 -> 另存为 —> CSV(逗号分隔)
　　　　6. 更改文件编码格式
　　　　　　1.用记事本/编辑器 打开，文件->另存为->选择编码
5.数据导出

　　1. 作用
　　　　将数据库中表的记录导出到系统文件里
　　2. 语法格式
　　　　select ... from 表名
　　　　into outfile "/var/lib/mysql-files/文件名"
　　　　fields terminated by "分隔符"
　　　　lines terminated by "\n";
　　3. 把MOSHOU库下的sanguo表英雄的姓名、攻击值、国家导出来,sanguo.txt
　　　　select name, gongji, country from MOSHOU.sanguo
　　　　into outfile "/var/lib/mysql-files/sanguo.txt"
　　　　fields terminated by " "
　　　　lines terminated by "\n";

　　4. 将mysql库下的user表 user、host两个字段的值导出到user.txt
　　　　select user,host from mysql.user
　　　　into outfile "/var/lib/mysql-files/user.txt"
　　　　fields terminated by " "
　　　　lines terminated by "\n";


6. 外键(foreign key)

　　1. 定义：让当前表字段的值在另一个表的范围内选择
　　2. 语法
　　　　foreign key(参考字段名)
　　　　references 主表(被参考字段名)
　　　　on delete 级联动作
　　　　on update 级联动作
　　3. 使用规则
　　　　1. 主表、从表字段数据类型要一致
　　　　2. 主表被参考字段： 主键
　　4. 示例
　　　　表1、缴费信息表(财务)
　　　　　　id 姓名 班级 缴费金额
　　　　　　1 唐伯虎 AID06 300
　　　　　　2 点秋香 AID06 260
　　　　　　3 祝枝山 AID06 250
　　　　表2、学生信息表(班主任)
　　　　　　id 姓名 缴费金额
　　　　　　1 唐伯虎 300
　　　　　　2 点秋香 260
　　　　　　3 XXXXXXXXXXX

　　　　1. 创建表
　　　　　　表1(主表)：
　　　　　　　　create table jftab(
　　　　　　　　id int primary key,
　　　　　　　　name varchar(15),
　　　　　　　　class char(5),
　　　　　　　　money int
　　　　　　　　);

　　　　　　　　insert into jftab values
　　　　　　　　(1,'唐伯虎', "AID06",300),
　　　　　　　　(2,"点秋香", "AID06",260),
　　　　　　　　(3,"祝枝山", "AID06",250);
　　　　　　表2(从表):
　　　　　　　　create table bjtab(
　　　　　　　　stu_id int,
　　　　　　　　name varchar(15)
　　　　　　　　money int,
　　　　　　　　foreign key(stu_id) references jftab(id)
　　　　　　　　on delete cascade
　　　　　　　　on update cascade
　　　　　　　　);

　　　　　　　　insert into bjtab values
　　　　　　　　(1,'唐伯虎', "AID06",300),
　　　　　　　　(2,"点秋香", "AID06",260);

　　5. 删除外键
　　　　alter table 表名 drop foreign key 外键名;
　　　　外键名：show create table 表名;

　　6. 级联动作
　　　　1. cascade
　　　　　　数据级联删除、更新(参考字段)
　　　　2. restrict(默认)
　　　　　　从表有相关联记录，不允许主表操作
　　　　3. set null
　　　　　　主表删除、更新，从表相关联记录字段值为NULL

　　7. 已有表添加外键
　　　　alter table 表名 add
　　　　foreign key(参考字段) referencees 主表(被参考字段)
　　　　on delete ...
　　　　on update ...
7. 表的复制

　　1. 语法
　　　　create table 表名 select ... from 表名 where 条件；
　　2. 示例
　　　　1. 复制MOSHOU.sanguo表的全部记录和字段，sanguo2
　　　　　　create table sanguo2
　　　　　　select * from MOSHOU.sanguo;
　　　　2. 复制MOSHOU.sanguo表的前3条记录，sanguo3
　　　　　　create table sanguo3
　　　　　　select * from MOSHOU.sanguo limit 3;
　　　　3. 复制MOSHOU.sanguo表的id,name,country三个字段的前5条记录，sanguo4
　　　　　　create table sanguo4
　　　　　　select id,name,country from MOSHOU.sanguo limit 5;

　　3. 复制表结构
　　　　create table 表名 select * from 表名 where false;

　　　　1. 复制 jftab 的表结构，jftab2
　　　　　　create table jftab2 select * from jftab where false;

　　4. 注意
　　　　复制表的时候不会把原表的键(key)属性复制过来
8. 嵌套查询(子查询)

　　1. 定义: 把内层的查询结果作为外层的查询条件
　　2. 语法格式
　　　　select ... from 表名 where 条件(select ....);
　　3. 示例
　　　　1. 把攻击值小于平均值的英雄名字和攻击值显示出来
　　　　　　1. 先计算平均值
　　　　　　　　select avg(gongji) from MOSHOU.sanguo;
　　　　　　2. 找到 < 平均值
　　　　　　　　select name,gongji from MOSHOU.sanguo
　　　　　　　　where gongji< 平均值；

　　　　　　上面两条语句的结合为: select name,gongji from MOSHOU.sanguo
　　　　　　　　where gongji< (select avg(gongji) from MOSHOU.sanguo);

　　　　2. 找出每个国家攻击力最高的英雄的名字和攻击值
　　　　　　BUG: select name,gongji from MOSHOU.sanguo
　　　　　　where
　　　　　　gongji in(select max(gongji) from sanguo group by country);
　　　　　　## 无BUG
　　　　　　select name,gongji from MOSHOU.sanguo
　　　　　　where
　　　　　　(country,gongji) in(select country,max(gongji) from sanguo group by country);
9. 多表查询

　　1. 两种方式
　　　　1. select 字段名列表 from 表名列表;(笛卡尔积)
　　　　　　t1: name -> "A1" "A2" "A3"
　　　　　　t2: name -> "B1" "B2"
　　　　　　select * from t1,t2;
　　　　2. ... where 条件；

　　2. 练习
　　　　1. 显示省和市的详细信息
　　　　　　河北省 石家庄市
　　　　　　河北省 廊坊市
　　　　　　湖北省 武汉市

　　　　　　select sheng.s_name,city.c_name from sheng,city
　　　　　　where
　　　　　　sheng.s_id = city.cfather_id;
　　　　2. 显示省、市和县的详细信息
　　　　　　select sheng.s_name,city.c_name,xian.x_name from sheng,city,xian
　　　　　　where
　　　　　　sheng.s_id = city.cfather_id and city.c_id = xian.xfather_id;
10. 连接查询

　　1. 内连接
　　　　1. 语法格式
　　　　　　select 字段名 from 表1 inner join 表2 on 条件
　　　　　　inner join 表3 on 条件;
　　　　2. 显示省市详细信息
　　　　　　select sheng.s_name,city.c_name from sheng
　　　　　　inner join city on sheng.s_id=city.cfather_id;
　　　　3. 显示省市县详细信息
　　　　　　select sheng.s_name,city.c_name,xian.x_name from sheng
　　　　　　inner join city on sheng.s_id=city.cfather_id
　　　　　　inner join xian on city.c_id = xian.xfather_id;

　　2. 外连接
　　　　1. 左连接
　　　　　　1. 以左表为主显示查询结果
　　　　　　2. select 字段名 from
　　　　　　　　表1 left join 表2 on 条件
　　　　　　　　left join 表3 on 条件;
　　　　　　3. 显示省市详细信息
　　　　　　　　select sheng.s_name as sheng,city.c_name as city
　　　　　　　　from sheng left join city
　　　　　　　　on sheng.s_id=city.cfather_id;
　　　　　　4. 显示省市县的详细信息
　　　　　　　　select sheng.s_name as sheng,city.c_name as city,xian.x_name as xian
　　　　　　　　from sheng left join city
　　　　　　　　on sheng.s_id=city.cfather_id
　　　　　　　　left join xian
　　　　　　　　on city.c_id = xian.xfather_id;

　　　　2. 右连接
　　　　　　1. 以右表为主显示查询结果
　　　　　　2. select 字段名 from
　　　　　　　　表1 right join 表2 on 条件
　　　　　　　　right join 表3 on 条件;
11. 数据备份(mysqldump,在Linux终端中操作)

　　1. 命令格式
　　　　完全备份：
　　　　mysqldump -u用户名 -p 源库名 > ~/***.sql
　　2. 源库名的表示方式
　　　　--all-databases 备份所有库
　　　　库名 备份单个库
　　　　-B 库1 库2 库3 备份多个库
　　　　库名 表1 表2 表3 备份指定库的多张表

　　3. 示例
　　　　1. 备份所有库，放到 mydata 目录下：all.sql
　　　　　　mysqldump -uroot -p --all-databases > all.sql
　　　　2. 备份 db4 库中的 sheng city xian 三张表，scx.sql
　　　　　　mysqldump -uroot -p db4 sheng city xian > scx.sql
　　　　3. 备份 MOSHOU 和 db4 库，md.sql
　　　　　　mysqldump -uroot -p -B MOSHOU db4 > md.sql
12. 数据恢复

　　1. 命令格式(Linux终端)
　　　　mysql -uroot -p 目标库名 < ***.sql

　　2. 从所有库备份中恢复某个库(--one-database)
　　　　mysql -uroot -p --one-database 目标库名 < all.sql

　　3. 示例
　　　　1. 在db4.sheng 新增一条记录

　　　　2. 在db4中新建一张表 t888
　　　　3. 在db4.sql中恢复db4库

　　　　4.注意
　　　　　　1. 恢复库时如果恢复到源库会将表中数据覆盖，新增表不会删除
　　　　　　2. 数据恢复时如果恢复的库不存在，则必须先创建空库
13. MySQL的用户账户管理

　　1. 开启MySQL远程连接
　　　　1. sudo -i
　　　　2. cd /etc/mysql/mysql.conf.d/
　　　　3. subl mysqld.cnf
　　　　　　#bind-address = 127.0.0.1 ctrl + s保存

　　　　4. /etc/init.d/mysql restart
　　2. 添加授权用户
　　　　1. 用root用户登录mysql
　　　　　　mysql -uroot -p123456
　　　　2. 授权
　　　　　　grant 权限列表 on 库.表 to "用户名"@"%"
　　　　　　identified by "密码" with grant option;
　　　　　　with grant option # 这句表示新添加的用户名有往下授权的权限

　　　　　　权限列表：all privileges、select、insert
　　　　　　库.表 ：*.* 所有库的所有表

　　3. 示例
　　　　1. 添加授权用户tiger，密码123，对所有库的所有表有所有权限
　　　　　　grant all privileges on *.* to "zcc"@"%"
　　　　　　identified by "123" with grant option;

　　　　2. 添加用户rabbit,对db4库有所有权限
　　　　　　grant all privileges on db4.* to "rabbit"@"%"
　　　　　　idetified by "123" with grant option;
