本案例要求对Nginx服务器进行适当优化，解决如下问题，以提升服务器的处理性能：
1.如何自定义返回给客户端的404错误页面
2.如何查看服务器状态信息
3.如果客户端访问服务器提示“Too many open files”如何解决
4.如何解决客户端访问头部信息过长的问题
5.如何让客户端浏览器缓存数据
6.编写测试脚本生成长头部信息的访问请求
7.客户端访问不存在的页面，测试404错误页面是否重定向


自定义报错页面
2）修改Nginx配置文件，自定义报错页面
	]# vim /usr/local/nginx/conf/nginx.conf
      charset utf-8;                    //仅在需要中文时修改该选项
    	error_page   404  /404.html;    //自定义错误页面
	]# vim /usr/local/nginx/html/404.html        //生成错误页面


如何查看服务器状态信息（非常重要的功能）
1）编译安装时使用--with-http_stub_status_module开启状态页面模块
	]# tar  -zxvf   nginx-1.12.2.tar.gz
	]# cd  nginx-1.12.2
	nginx-1.12.2]# ./configure   \
	> --with-http_ssl_module                        //开启SSL加密功能
	> --with-stream                                //开启TCP/UDP代理模块
	> --with-http_stub_status_module                //开启status状态页面
	nginx-1.12.2]# make && make install    //编译并安装
	]# /usr/local/nginx/sbin/nginx

2）修改Nginx配置文件，定义状态页面
	]# vim /usr/local/nginx/conf/nginx.conf
	location /status {
                stub_status on;
                 #allow IP地址;
                 #deny IP地址;
        }
3）优化后，查看状态页面信息
	]# curl  http://192.168.4.5/status
Active connections：当前活动的连接数量。
Accepts：已经接受客户端的连接总数量。
Handled：已经处理客户端的连接总数量。
（一般与accepts一致，除非服务器限制了连接数量）。
Requests：客户端发送的请求数量。
Reading：当前服务器正在读取客户端请求头的数量。
Writing：当前服务器正在写响应信息的数量。
Waiting：当前多少客户端在等待服务器的响应。



优化Nginx并发量
1）优化前使用ab高并发测试
	]# ab -n 2000 -c 2000 http://192.168.4.5/  	//http自带测试工具 -c发送2000个包 -b使用2000个用户

2）修改Nginx配置文件，增加并发量
	]# vim /usr/local/nginx/conf/nginx.conf
	worker_processes  2;                    //与CPU核心数量一致
	events {
	worker_connections 65535;        //每个worker最大并发连接数
	}
	]# nginx -s reload

3）优化Linux内核参数（最大文件数量）
	]# ulimit -a                        //查看所有属性值
	]# ulimit -Hn 100000                //设置硬限制（临时规则）
	]# ulimit -Sn 100000                //设置软限制（临时规则）
	]# vim /etc/security/limits.conf

	*               soft    nofile            100000
	*               hard    nofile            100000
	#该配置文件分4列，分别如下：
	#用户或组    硬限制或软限制    需要限制的项目   限制的值


优化Nginx数据包头缓存
1）修改Nginx配置文件，增加数据包头部缓存大小
	]# vim /usr/local/nginx/conf/nginx.conf
	http {
	client_header_buffer_size    1k;        //默认请求包头信息的缓存    
	large_client_header_buffers  4 4k;        //大请求包头部信息的缓存个数与容量
	}


浏览器本地缓存静态数据
1）修改Nginx配置文件，定义对静态页面的缓存时间
	]# vim /usr/local/nginx/conf/nginx.conf
	server {
        listen       80;
        server_name  localhost;
        location / {
            root   html;
            index  index.html index.htm;
        }
	location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {	//定义缓存哪些类型的数据
	expires        30d;            //定义客户端缓存时间为30天
	}
	}
在firefox地址栏内输入about:cache，查看本地缓存数据，查看是否有图片以及过期时间是否正确。









